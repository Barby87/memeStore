{"version":3,"sources":["components/memeCardCreate/MemeCardCreate.module.css","components/loadingSpinner/LoadingSpinner.module.css","components/memeCardItem/MemeCardItem.module.css","containers/login/Login.module.css","components/privateRoute/PrivateRoute.js","components/formLogin/FormLogin.jsx","hooks/useFormUsers.js","store/login/constants.js","store/login/actions.js","containers/login/Login.jsx","store/memes/selectors.js","store/memes/constants.js","store/memes/thunks.js","store/memes/actions.js","components/memeCardCreate/MemeCardCreate.jsx","components/memeForm/MemeForm.jsx","components/loadingSpinner/LoadingSpinner.jsx","containers/memeCreate/MemeCreate.jsx","store/memes/secrets.js","containers/memeDelete/MemeDelete.jsx","components/memeCardItem/MemeCardItem.jsx","containers/memesList/MemesList.jsx","containers/myList/MyList.jsx","containers/navBar/NavBar.jsx","App.js","reportWebVitals.js","store/login/index.js","store/initialState.js","store/memes/memeReducer.js","store/rootReducer.js","store/index.js","index.js","containers/myList/MyList.module.css","containers/memeCreate/MemeCreate.module.css","containers/memesList/MemesList.module.css"],"names":["module","exports","PrivateRoute","Component","component","isLogin","Rest","render","routeProps","to","FormLogin","onFinish","onFinishFailed","handleChangeForm","valueEmail","valuePassword","initialValues","Form","useForm","form","React","useEffect","setFieldsValue","username","password","labelCol","span","wrapperCol","onFieldsChange","values","Item","name","label","rules","required","message","type","prefix","UserOutlined","className","Password","LockOutlined","offset","htmlType","useFormUsers","initialState","useState","formValues","setFormValues","handleChange","target","value","LOGIN_USER","LOGIN_USER_INIT","LOGIN_USER_SUCCESS","LOGIN_USER_ERROR","userLogin","cb","dispatch","loginFail","error","payload","fetch","method","headers","body","JSON","stringify","then","response","json","data","jwt","localStorage","Login","useDispatch","history","useHistory","push","styles","title","justify","align","memesSelector","memes","FETCH_MEMES_START","FETCH_MEMES_SUCCESS","FETCH_MEMES_FAILURE","DELETE_MEME_START","DELETE_MEME_SUCCESS","DELETE_MEME_FAILURE","CREATE_MEME_START","CREATE_MEME_SUCCESS","CREATE_MEME_FAILURE","fetchMemesStartThunk","getState","a","errorMessage","Meta","Card","MemeCardCreate","alt","description","src","onClickCreate","onClickDelete","sm","md","xl","card_wrapper","style","width","cover","image","actions","EditOutlined","onClick","MemeForm","valueText0","valueText1","text0","text1","LoadingSpinner","spinner_container","spinner","tip","MemeCreate","useSelector","isLoading","state","memeLimit","setMemeLimit","handleCreateMeme","id","params","bodyParams","Object","keys","map","key","encodeURIComponent","join","console","log","url","createMemeStartThunk","template_id","container","list_container","slice","meme","MemeDelete","MemeCardItem","hoverable","MemesList","showIcon","MyList","myListMemes","length","rel","href","link","NavBar","login","success","mode","App","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialStore","loading","initialStateMemes","memesReducer","action","filter","parseInt","rootReducer","combineReducers","prevState","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.91294543.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card_wrapper\":\"MemeCardCreate_card_wrapper__2DGmZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spinner_container\":\"LoadingSpinner_spinner_container__xCjOz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card_wrapper\":\"MemeCardItem_card_wrapper__38JaG\",\"image\":\"MemeCardItem_image__2mBK5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Login_title__3XZU6\"};","import React from 'react';\r\n// import { useSelector } from 'react-redux';\r\nimport { Redirect, Route } from 'react-router-dom';\r\n\r\nconst PrivateRoute = ({component: Component, isLogin, ...Rest}) => {\r\n    // Si está logueado le muestro el componente privado, de lo contrario lo redirijo a home (login)\r\n    return isLogin ? <Route {...Rest} render={routeProps => <Component {...routeProps}/>}/> : <Redirect to=\"/\" />;\r\n};\r\n\r\nexport default PrivateRoute;\r\n","import React from 'react';\r\nimport { Button, Form, Input } from 'antd';\r\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\r\n\r\nconst FormLogin = ({\r\n    onFinish, \r\n    onFinishFailed,\r\n    handleChangeForm, \r\n    valueEmail, \r\n    valuePassword,\r\n    initialValues\r\n\r\n}) => {\r\n    const [form] = Form.useForm();\r\n    const layout = {\r\n        labelCol: { span: 12 },\r\n        wrapperCol: { span: 16 },\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        form.setFieldsValue({\r\n            username: valueEmail,\r\n            password: valuePassword\r\n           \r\n        });\r\n    }, [form, valueEmail, valuePassword]);\r\n\r\n    return (\r\n        <div>\r\n            <Form \r\n                {...layout}\r\n                onFinish={onFinish} \r\n                onFinishFailed={onFinishFailed}\r\n                form={form} \r\n                onFieldsChange={(values) =>\r\n                    handleChangeForm(values[0])\r\n                }\r\n                initialValues={initialValues}\r\n            >\r\n                <Form.Item \r\n                    name=\"username\"\r\n                    label=\"Nombre de usuario\" \r\n                    rules={[{ required: true, message:\"Porfavor, ingresa tu e-mail\" }]}>\r\n                        <Input type=\"text\" prefix={<UserOutlined className=\"site-form-item-icon\" />}/>\r\n                </Form.Item>\r\n                <Form.Item \r\n                    name=\"password\"\r\n                    label=\"Contraseña\" \r\n                    rules={[{ required: true }]}>\r\n                        <Input.Password prefix={<LockOutlined className=\"site-form-item-icon\" />}/>\r\n                </Form.Item>\r\n               \r\n                <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                    Submit\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FormLogin;\r\n","import { useState } from 'react';\r\n\r\nconst useFormUsers = (initialState) => {\r\n\tconst [ formValues, setFormValues ] = useState(initialState);\r\n\r\n\tconst handleChange = (target) => {\r\n\t\tsetFormValues({\r\n\t\t\t...formValues,\r\n\t\t\t[target.name]: target.value\r\n\t\t});\r\n\t}\r\n\r\n\treturn { formValues, setFormValues, handleChange }\r\n}\r\n\r\nexport default useFormUsers;","const LOGIN_USER = 'LOGIN_USER';\r\nexport const LOGIN_USER_INIT = `${LOGIN_USER}_INIT`;\r\nexport const LOGIN_USER_SUCCESS = `${LOGIN_USER}_SUCCESS`;\r\nexport const LOGIN_USER_ERROR = `${LOGIN_USER}_ERROR`;","import { LOGIN_USER_ERROR, LOGIN_USER_INIT, LOGIN_USER_SUCCESS } from \"./constants\";\r\n\r\nexport const userLogin = ({ username, password }, cb) => {\r\n  return (dispatch) => {\r\n    dispatch({ type: LOGIN_USER_INIT });\r\n\r\n    const loginSuccess = (response) => {\r\n      dispatch({ type: LOGIN_USER_SUCCESS, payload: response });\r\n    };\r\n    const loginFail = (error) => {\r\n      dispatch({ type: LOGIN_USER_ERROR, payload: error });\r\n    };\r\n    \r\n    try {\r\n      fetch(\"https://api-mock-login.herokuapp.com/auth/login\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          username,\r\n          password,\r\n        }),\r\n      }).then((response)=>{\r\n        return response.json()\r\n      }).then((data)=>{\r\n        if (data.jwt){\r\n         // Guardando token en localStorage\r\n          localStorage.jwt = data.jwt;\r\n          loginSuccess(username);\r\n          // Si la respuesta es exitosa se ejecuta el callback\r\n          cb()\r\n        }\r\n        else{\r\n          loginFail(data.error);\r\n        }\r\n      })\r\n    } catch (error) {\r\n      loginFail(error);\r\n    }\r\n  };\r\n};\r\n","import { Col, Row } from 'antd';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router';\r\nimport FormLogin from '../../components/formLogin/FormLogin';\r\nimport useFormUsers from '../../hooks/useFormUsers';\r\nimport { userLogin } from '../../store/login/actions';\r\nimport styles from './Login.module.css';\r\n\r\nconst Login = () => {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const { formValues, handleChange } = useFormUsers({\r\n    username: '',\r\n    password: '',\r\n  });\r\n\r\n  const cb = () => history.push(\"/meme/create\");\r\n\r\n  const handleSubmit = () => {\r\n    // Se pone como argumento un callback con el history.push para que espere la respuesta de la api antes de dirigir a esa ruta\r\n    dispatch(userLogin(formValues, cb));\r\n  };\r\n  \r\n  return (\r\n   <div>\r\n      <h2 className={styles.title}>Login</h2>\r\n      <Row type=\"flex\" justify=\"center\" align=\"middle\">\r\n          <Col span={8}>\r\n              <FormLogin \r\n                onFinish={handleSubmit} \r\n                handleChangeForm={handleChange}\r\n                valueEmail={formValues?.username}\r\n                valuePassword={formValues?.password}\r\n              />\r\n          </Col>\r\n      </Row>\r\n   </div>\r\n  );\r\n};\r\n\r\nexport default Login;","export const memesSelector = ({ memes }) => {\r\n    return memes?.data;\r\n};\r\n","// Una constante (palabra clave) para cada acción\r\n// Fetch\r\nexport const FETCH_MEMES_START = 'FETCH_MEMES_START'; // Iniciar\r\nexport const FETCH_MEMES_SUCCESS = 'FETCH_MEMES_SUCCES'; // Exito de la petición\r\nexport const FETCH_MEMES_FAILURE = 'FETCH_MEMES_FAILURE'; // Cuando falla la petición\r\n\r\n// Delete\r\nexport const DELETE_MEME_START = 'DELETE_MEME_START';\r\nexport const DELETE_MEME_SUCCESS = 'DELETE_MEME_SUCCESS';\r\nexport const DELETE_MEME_FAILURE = 'DELETE_MEME_FAILURE';\r\n\r\n// Create\r\nexport const CREATE_MEME_START = 'CREATE_MEME_START';\r\nexport const CREATE_MEME_SUCCESS = 'CREATE_MEME_SUCCESS';\r\nexport const CREATE_MEME_FAILURE = 'CREATE_MEME_FAILURE';\r\n","import { \r\n    createMemeFailure, \r\n    createMemeStart, \r\n    createMemeSuccess, \r\n    // deleteMemeFailure, \r\n    // deleteMemeStart, \r\n    // deleteMemeSuccess, \r\n    fetchMemesFailure, \r\n    fetchMemesStart, \r\n    fetchMemesSuccess, \r\n} from \"./actions\";\r\n\r\nimport { username, password } from \"./secrets\";\r\n\r\n// Fetch\r\nexport const fetchMemesStartThunk = () => {\r\n    return async (dispatch, getState) => {\r\n        // const {Memes} = getState();\r\n        dispatch(fetchMemesStart());\r\n        try {\r\n            const response = await fetch(`https://api.imgflip.com/get_memes`)\r\n            const data = await response.json();\r\n            dispatch(fetchMemesSuccess(data.data.memes));            \r\n        } catch (error) {\r\n            dispatch(fetchMemesFailure(error.message));\r\n        }\r\n    }\r\n}\r\n\r\n// Delete\r\n// export const deleteMemeStartThunk = (id) => {\r\n//     return async (dispatch, getState) => {\r\n//         dispatch(deleteMemeStart());\r\n//         try {\r\n//             const response = await fetch(`https://api.imgflip.com/meme/${id}`, {\r\n//                 method: 'DELETE'\r\n//             })\r\n//             const data = await response.json();\r\n//             console.log('data', data);\r\n//             // Se despacha la acción deleteMemeSuccess con el id para borrar del estado local el elemento que la api borró, una vez que tuvo éxito\r\n//             dispatch(deleteMemeSuccess(id))            \r\n//         } catch (error) {\r\n//             dispatch(deleteMemeFailure(error.message));\r\n//         }\r\n//     }\r\n// }\r\n\r\n// Create\r\nexport const createMemeStartThunk = (params, cb) => {\r\n    return async (dispatch) => {\r\n        dispatch(createMemeStart());\r\n        try {\r\n            params[\"password\"] = password;\r\n            params[\"username\"]= username;\r\n            // const params = {username: username, password: password};\r\n            const bodyParams = Object.keys(params)\r\n            .map((key) => {\r\n              return encodeURIComponent(key) + \"=\" + encodeURIComponent(params[key]);\r\n            })\r\n            .join(\"&\");\r\n            const response = await fetch('https://api.imgflip.com/caption_image', { \r\n                method: 'POST', \r\n                body: bodyParams,\r\n                headers: {\r\n                    'Content-type': 'application/x-www-form-urlencoded',\r\n                }\r\n            })\r\n            const data = await response.json();\r\n            console.log('data', data);\r\n            const url = data.data.url;\r\n            params.url = url;\r\n            dispatch(createMemeSuccess(params));\r\n            cb();\r\n        } catch (error) {\r\n            dispatch(createMemeFailure(error.message));\r\n        }\r\n    }\r\n}\r\n\r\n\r\n","import { \r\n    FETCH_MEMES_FAILURE, \r\n    FETCH_MEMES_START, \r\n    FETCH_MEMES_SUCCESS, \r\n    DELETE_MEME_START, \r\n    DELETE_MEME_SUCCESS, \r\n    DELETE_MEME_FAILURE ,\r\n    CREATE_MEME_START, \r\n    CREATE_MEME_SUCCESS, \r\n    CREATE_MEME_FAILURE, \r\n} from \"./constants\";\r\n\r\n// import store from \"../index\";\r\n\r\n// Acciones asíncronas\r\n// Fetch\r\nexport const fetchMemesStart = () => ({\r\n    type: FETCH_MEMES_START\r\n})\r\n\r\nexport const fetchMemesSuccess = (memes) => ({\r\n    type: FETCH_MEMES_SUCCESS,\r\n    payload: memes\r\n})\r\n\r\nexport const fetchMemesFailure = (errorMessage) => ({\r\n    type: FETCH_MEMES_FAILURE,\r\n    payload: errorMessage\r\n})\r\n\r\n// Delete\r\nexport const deleteMemeStart = () => ({\r\n    type: DELETE_MEME_START,\r\n})\r\n\r\nexport const deleteMemeSuccess = (id) => ({\r\n    type: DELETE_MEME_SUCCESS,\r\n    payload: id\r\n})\r\n\r\nexport const deleteMemeFailure = (errorMessage) => ({\r\n    type: DELETE_MEME_FAILURE,\r\n    payload: errorMessage\r\n})\r\n\r\n// Create\r\nexport const createMemeStart = () => ({\r\n    type: CREATE_MEME_START,\r\n})\r\n\r\nexport const createMemeSuccess = (meme) => ({\r\n    type: CREATE_MEME_SUCCESS,\r\n    payload: meme\r\n})\r\n\r\nexport const createMemeFailure = (errorMessage) => ({\r\n    type: CREATE_MEME_FAILURE,\r\n    payload: errorMessage\r\n})\r\n\r\n\r\n","import React from 'react';\r\nimport { Card, Col } from 'antd';\r\nimport { EditOutlined } from '@ant-design/icons';\r\nimport styles from './MemeCardCreate.module.css';\r\nconst { Meta } = Card;\r\n\r\nconst MemeCardCreate = ({ alt, description, src, title, onClickCreate, onClickDelete }) => {\r\n    return (\r\n        <Col sm={24} md={8} xl={6} className={styles.card_wrapper}>\r\n            <Card\r\n                style={{ width: 300}}\r\n                cover={\r\n                    <img\r\n                        alt={alt}\r\n                        src={src}\r\n                        className={styles.image}\r\n                    />\r\n                }\r\n                actions={[\r\n                    <EditOutlined key=\"create\" onClick={onClickCreate} />,\r\n                    // <DeleteOutlined key=\"delete\" onClick={onClickDelete} />,\r\n                ]}\r\n            >\r\n                <Meta\r\n                    title={title}\r\n                    description={description}\r\n                />\r\n            </Card>\r\n        </Col>\r\n    )\r\n}\r\n\r\nexport default MemeCardCreate;","import React, { useEffect } from 'react';\r\nimport { Form, Input } from 'antd';\r\n\r\nconst MemeForm = ({\r\n    handleChangeForm, \r\n    initialValues,\r\n    valueText0,\r\n    valueText1,\r\n}) => {\r\n    const [form] = Form.useForm();\r\n\r\n    useEffect(() => {\r\n        form.setFieldsValue({\r\n            text0: valueText0,\r\n            text1: valueText1\r\n        });\r\n    }, [form, valueText0, valueText1]);\r\n    \r\n    return (\r\n        <Form \r\n            form={form} \r\n            onFieldsChange={(values) =>\r\n                handleChangeForm(values[0])\r\n            }\r\n            initialValues={initialValues}\r\n        >\r\n            <Form.Item \r\n                name=\"text0\" \r\n                label=\"Texto 1\"\r\n                rules={[{ required: true, message:\"Campo obligatorio\" }]}\r\n            >\r\n                <Input />\r\n            </Form.Item>\r\n            <Form.Item \r\n                name=\"text1\" \r\n                label=\"Texto 2\"\r\n                rules={[{ required: true, message:\"Campo obligatorio\" }]}\r\n            >\r\n                <Input />\r\n            </Form.Item>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default MemeForm\r\n","import React from 'react';\r\nimport { Spin } from 'antd';\r\nimport styles from './LoadingSpinner.module.css';\r\n\r\nconst LoadingSpinner = () => {\r\n    return (\r\n        <div className={styles.spinner_container}>\r\n            <Spin className={styles.spinner} tip=\"Loading...\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoadingSpinner;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { memesSelector } from '../../store/memes/selectors';\r\nimport { createMemeStartThunk, fetchMemesStartThunk } from '../../store/memes/thunks';\r\nimport { Button, Col, Row } from 'antd';\r\nimport styles from './MemeCreate.module.css';\r\nimport MemeCardCreate from '../../components/memeCardCreate/MemeCardCreate';\r\nimport MemeForm from '../../components/memeForm/MemeForm';\r\nimport useFormUsers from '../../hooks/useFormUsers';\r\nimport LoadingSpinner from '../../components/loadingSpinner/LoadingSpinner';\r\nimport { useHistory } from 'react-router';\r\n\r\nconst MemeCreate = () => {\r\n    const memes = useSelector(memesSelector);\r\n    const { isLoading } = useSelector((state) => state.memes);\r\n    const dispatch = useDispatch();\r\n    const { formValues, handleChange, setFormValues } = useFormUsers({\r\n        text0: '',\r\n        text1: '',\r\n      });\r\n    const [memeLimit, setMemeLimit] = useState(10);\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        if(isLoading === 'iddle') \r\n            dispatch(fetchMemesStartThunk());\r\n    }, [isLoading, dispatch]);\r\n\r\n    \r\n    const cb = () => history.push(\"/my-list\");\r\n\r\n    const handleCreateMeme = (id) => {\r\n        if(formValues.text0 !== \"\" && formValues.text1 !== \"\") {\r\n            // Se pone como argumento un callback con el history.push para que espere la respuesta de la api antes de dirigir a esa ruta\r\n            dispatch(createMemeStartThunk({\r\n                text0: formValues.text0,\r\n                text1: formValues.text1,\r\n                template_id: id,\r\n            }, cb));\r\n        } else {\r\n            return\r\n        }\r\n        setFormValues({\r\n            text0: \"\",\r\n            text1: \"\"\r\n        })\r\n    };\r\n\r\n    return (\r\n        isLoading === 'loading' ? (\r\n            <LoadingSpinner/>\r\n        ) : (\r\n            <div className={styles.container}>\r\n                <h2 className={styles.title}>Bienvenido a MemeStore</h2>\r\n                <Row type=\"flex\" justify=\"center\">\r\n                    <Col span={8}>\r\n                        <MemeForm\r\n                            handleChangeForm={handleChange}\r\n                            valueText0={formValues?.text0}\r\n                            valueText1={formValues?.text1}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                \r\n                <Row \r\n                    type=\"flex\" \r\n                    justify=\"space-around\" \r\n                    align=\"center\" \r\n                    className={styles.list_container} \r\n                > \r\n                        {memes?.slice(0, memeLimit).map((meme) => (\r\n                                <MemeCardCreate\r\n                                    key={meme?.id}\r\n                                    alt={meme?.name}\r\n                                    src={meme?.url}\r\n                                    title={meme?.name}\r\n                                    onClickCreate={() => handleCreateMeme(meme.id)}\r\n                                />\r\n                            ))\r\n                        }\r\n                </Row >\r\n                <Row type=\"flex\" justify=\"center\">\r\n                    <Col>\r\n                        <Button onClick={() => setMemeLimit(memeLimit+10)} type=\"primary\">Mostrar más</Button>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        )\r\n    )\r\n}\r\n\r\nexport default MemeCreate;\r\n","const username = \"BrbaraCceres\";\r\nconst password = \"E$XNPeA!u8Cd$cw\";\r\nexport { username, password };","import React from 'react'\r\n\r\nconst MemeDelete = () => {\r\n    return (\r\n        <div>\r\n            <h1>Eliminar meme</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MemeDelete\r\n","import React from 'react';\r\nimport { Card, Col } from 'antd';\r\nimport styles from './MemeCardItem.module.css';\r\n\r\nconst { Meta } = Card;\r\n\r\nconst MemeCardItem = ({src, title}) => {\r\n    return (\r\n        <Col sm={24} md={8} xl={6} className={styles.card_wrapper}>\r\n            <Card\r\n                hoverable\r\n                style={{ width: 300 }}\r\n                cover={<img alt=\"example\" src={src} />}\r\n                className={styles.image}\r\n            >\r\n                <Meta title={title} />\r\n            </Card>\r\n        </Col>\r\n    )\r\n}\r\n\r\nexport default MemeCardItem\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { memesSelector } from '../../store/memes/selectors';\r\nimport { fetchMemesStartThunk } from '../../store/memes/thunks';\r\nimport { Alert, Button, Col, Row } from 'antd';\r\nimport styles from './MemesList.module.css';\r\nimport LoadingSpinner from '../../components/loadingSpinner/LoadingSpinner';\r\nimport MemeCardItem from '../../components/memeCardItem/MemeCardItem';\r\n\r\nconst MemesList = () => {\r\n    const memes = useSelector(memesSelector);\r\n    const { isLoading } = useSelector((state) => state.memes);\r\n    const dispatch = useDispatch();\r\n    const [memeLimit, setMemeLimit] = useState(10);\r\n\r\n    useEffect(() => {\r\n        if(isLoading === 'iddle') \r\n            dispatch(fetchMemesStartThunk());\r\n    }, [isLoading, dispatch]);\r\n\r\n    return (\r\n        isLoading === 'loading' ? (\r\n            <LoadingSpinner/>\r\n        ) : (\r\n            <div className={styles.container}>\r\n                <h2 className={styles.title}>Bienvenido a MemeStore</h2>\r\n                <Row type=\"flex\" justify=\"center\">\r\n                   <Col span={12}>\r\n                        <Alert message=\"Para crear tus memes personalizados debes loguearte\" type=\"warning\" showIcon/>\r\n                   </Col>\r\n                </Row>\r\n                \r\n                <Row \r\n                    type=\"flex\" \r\n                    justify=\"space-around\" \r\n                    align=\"center\" \r\n                    className={styles.list_container} \r\n                > \r\n                    {memes?.slice(0, memeLimit).map((meme) => (\r\n                            <MemeCardItem\r\n                                key={meme?.id}\r\n                                alt={meme?.name}\r\n                                src={meme?.url}\r\n                                title={meme?.name}\r\n                            />\r\n                        ))\r\n                    }\r\n                </Row >\r\n                <Row type=\"flex\" justify=\"center\">\r\n                    <Col>\r\n                        <Button onClick={() => setMemeLimit(memeLimit+10)} type=\"primary\">Mostrar más</Button>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        )\r\n    )\r\n}\r\n\r\nexport default MemesList;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { memesSelector } from '../../store/memes/selectors';\r\nimport { fetchMemesStartThunk } from '../../store/memes/thunks';\r\nimport { Alert, Button, Col, Row } from 'antd';\r\nimport styles from './MyList.module.css';\r\nimport LoadingSpinner from '../../components/loadingSpinner/LoadingSpinner';\r\nimport MemeCardItem from '../../components/memeCardItem/MemeCardItem';\r\n\r\nconst MyList = () => {\r\n    const memes = useSelector(memesSelector);\r\n    const myListMemes = memes.slice(100,)\r\n    const { isLoading } = useSelector((state) => state.memes);\r\n    const dispatch = useDispatch();\r\n    const [memeLimit, setMemeLimit] = useState(10);\r\n    console.log('myListMemes', myListMemes)\r\n\r\n    useEffect(() => {\r\n        if(isLoading === 'iddle') \r\n            dispatch(fetchMemesStartThunk());\r\n    }, [isLoading, dispatch]);\r\n\r\n    return (\r\n        isLoading === 'loading' ? (\r\n            <LoadingSpinner/>\r\n        ) : (\r\n            <div className={styles.container}>\r\n                <h2 className={styles.title}>Mi lista de memes</h2>\r\n                {myListMemes.length === 0 ? \r\n                    (<Row type=\"flex\" justify=\"center\">\r\n                    <Col span={12}>\r\n                            <Alert message=\"Tu lista de memes está vacía\" type=\"warning\" showIcon/>\r\n                    </Col>\r\n                    </Row>) : (\r\n                        <div>\r\n                            <Row \r\n                            type=\"flex\" \r\n                            justify=\"space-around\" \r\n                            align=\"center\" \r\n                            className={styles.list_container} \r\n                        > \r\n                            {myListMemes?.slice(0, memeLimit).map((meme) => (\r\n                                    <a target=\"_blank\" rel=\"noreferrer\" href={meme?.url} className={styles.link}>\r\n                                        <MemeCardItem\r\n                                            key={meme?.id}\r\n                                            alt={meme?.name}\r\n                                            src={meme?.url}\r\n                                            title={meme?.name}\r\n                                        />\r\n                                    </a>\r\n                                ))\r\n                            }\r\n                        </Row >\r\n                        {myListMemes.length > 10 &&<Row type=\"flex\" justify=\"center\">\r\n                            <Col>\r\n                                <Button onClick={() => setMemeLimit(memeLimit+10)} type=\"primary\">Mostrar más</Button>\r\n                            </Col>\r\n                        </Row>}\r\n                        </div>\r\n                        \r\n                    )\r\n                \r\n                        }\r\n            </div>\r\n        )\r\n    )\r\n}\r\n\r\nexport default MyList;\r\n","import React from 'react';\r\nimport { Menu } from 'antd';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst NavBar = () => {\r\n    const isLogin = useSelector(state => state.login.success)\r\n\r\n    return (\r\n        <Menu mode=\"horizontal\">\r\n            {!isLogin &&<Menu.Item key=\"item1\">\r\n                <NavLink to=\"/\">\r\n                    Login\r\n                </NavLink>\r\n            </Menu.Item>}\r\n            {!isLogin && <Menu.Item key=\"item2\">\r\n                <NavLink to=\"/memes-list\">\r\n                    Lista de memes\r\n                </NavLink>\r\n            </Menu.Item>}\r\n            {isLogin &&<Menu.Item key=\"item3\">\r\n                <NavLink to=\"/meme/create\">\r\n                    Crear meme\r\n                </NavLink>\r\n            </Menu.Item>}\r\n            {isLogin &&<Menu.Item key=\"item4\">\r\n                <NavLink to=\"/my-list\">\r\n                    Mis memes\r\n                </NavLink>\r\n            </Menu.Item>}\r\n        </Menu>\r\n    )\r\n}\r\n\r\nexport default NavBar\r\n","import { useSelector } from 'react-redux';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport './App.css';\nimport PrivateRoute from './components/privateRoute/PrivateRoute';\nimport Login from './containers/login/Login';\nimport MemeCreate from './containers/memeCreate/MemeCreate';\nimport MemeDelete from './containers/memeDelete/MemeDelete';\nimport MemesList from './containers/memesList/MemesList';\nimport MyList from './containers/myList/MyList';\nimport NavBar from './containers/navBar/NavBar';\n\nfunction App() {\n  const isLogin = useSelector(state => state.login.success)\n  return (\n    <div className=\"App\">\n      <Router>\n        <NavBar/>\n        <Switch>\n          <Route path=\"/\" exact>\n            <Login/>\n          </Route>\n          <Route path=\"/memes-list\" exact>\n            <MemesList/>\n          </Route>\n          {/* <PrivateRoute path=\"/memes-list\" isLogin={isLogin} component={MemesList} /> */}\n          <PrivateRoute path=\"/my-list\" isLogin={isLogin} component={MyList}/>\n          <PrivateRoute path=\"/meme/create\" isLogin={isLogin} component={MemeCreate}/>\n          <PrivateRoute path=\"/meme/remove/:id\" isLogin={isLogin} component={MemeDelete}/>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { LOGIN_USER_ERROR, LOGIN_USER_INIT, LOGIN_USER_SUCCESS } from \"./constants\";\r\nconst initialStore = {\r\n  // usuario\r\n  data: {},\r\n  error: null,\r\n  success: null,\r\n  loading: false,\r\n};\r\n\r\nexport const loginReducer = (prevState = initialStore, action) => {\r\n  switch (action.type) {\r\n    case LOGIN_USER_INIT:\r\n      return {...prevState,\r\n        loading: true,\r\n      };\r\n    case LOGIN_USER_SUCCESS:\r\n      return {...prevState, \r\n        data: action.payload,\r\n        error: false,\r\n        success: true,\r\n        loading: false,\r\n      };\r\n    case LOGIN_USER_ERROR:\r\n      return {...prevState,\r\n        error: action.payload,\r\n        success: false,\r\n        loading: false,\r\n      };\r\n    default:\r\n      return prevState;\r\n  }\r\n};\r\n","export const initialStateMemes = {\r\n    isLoading: 'iddle',\r\n    data: [],\r\n    errorMessage: null,\r\n    message: null\r\n}\r\n","import { initialStateMemes } from \"../initialState\";\r\nimport { \r\n    FETCH_MEMES_FAILURE, \r\n    FETCH_MEMES_START, \r\n    FETCH_MEMES_SUCCESS, \r\n    DELETE_MEME_START, \r\n    DELETE_MEME_SUCCESS,\r\n    DELETE_MEME_FAILURE, \r\n    CREATE_MEME_START, \r\n    CREATE_MEME_SUCCESS, \r\n    CREATE_MEME_FAILURE,\r\n} from \"./constants\";\r\n\r\nconst memesReducer = ( state = initialStateMemes, action ) => {\r\n    switch (action.type) {\r\n        // Fetcg\r\n        case FETCH_MEMES_START:\r\n            return {\r\n                ...state,\r\n                isLoading: 'loading',\r\n            };\r\n        case FETCH_MEMES_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isLoading: 'succeeded',\r\n                data: action.payload,\r\n            };\r\n        case FETCH_MEMES_FAILURE:\r\n            return {\r\n                ...state,\r\n                errorMessage: action.payload,\r\n                isLoading: 'failed',\r\n                data: [],\r\n            };\r\n        // Delete\r\n        case DELETE_MEME_START:\r\n            return {\r\n                ...state,\r\n                isLoading: 'loading',\r\n            };\r\n        case DELETE_MEME_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isLoading: 'succeeded',\r\n                data: state.data.filter((meme) =>  meme.id !== parseInt(action.payload)),\r\n            };\r\n        case DELETE_MEME_FAILURE:\r\n            return {\r\n                ...state,\r\n                errorMessage: action.payload,\r\n                isLoading: 'failed',\r\n                data: [],\r\n        };\r\n        // Create\r\n        case CREATE_MEME_START:\r\n            return {\r\n                ...state,\r\n                isLoading: 'loading',\r\n            };\r\n        case CREATE_MEME_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isLoading: 'succeeded',\r\n                // Guardando el nuevo elemento en el estado inicial\r\n                data: [...state.data, action.payload]\r\n            };\r\n        case CREATE_MEME_FAILURE:\r\n            return {\r\n                ...state,\r\n                isLoading: 'failed',\r\n                data: []\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default memesReducer;","import { combineReducers } from \"redux\";\r\nimport { loginReducer } from \"./login\";\r\nimport memesReducer from \"./memes/memeReducer\";\r\n// import { productsReducer } from \"./products\";\r\n// import { usersReducer } from \"./users\";\r\n\r\n// RootReducer combina los reducers disponibles en el store\r\nconst rootReducer = combineReducers({\r\n    // state.login.data\r\n    login: loginReducer,\r\n    // Para acceder a los datos del usuario --> state.memes.data\r\n    memes: memesReducer,\r\n})\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./rootReducer\";\r\n\r\nconst store = createStore(rootReducer,composeWithDevTools(applyMiddleware(thunk)))\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from \"react-redux\";\nimport store from './store'\nimport 'antd/dist/antd.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"MyList_container__1xztW\",\"link\":\"MyList_link__3e5fx\",\"list_container\":\"MyList_list_container__b_t-d\",\"text\":\"MyList_text__3vyvK\",\"title\":\"MyList_title__Z-4zm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"MemeCreate_container__16uIU\",\"list_container\":\"MemeCreate_list_container__Nv1kT\",\"title\":\"MemeCreate_title__3HOz0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"MemesList_container__T7EUQ\",\"list_container\":\"MemesList_list_container__1d7cr\",\"text\":\"MemesList_text__16r9V\",\"title\":\"MemesList_title__1uNNp\"};"],"sourceRoot":""}